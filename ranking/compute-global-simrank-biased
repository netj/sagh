#!/usr/bin/env python
'''
Input: user-file-graph, simrank.pickled
Output: simrank-biased.txt
'''
import pickle
import sys
import math
import sagh

DEFAULT_POPULARITY_BIAS = 0.5

popularityBias = float(sys.argv[2]) if len(sys.argv) > 2 else DEFAULT_POPULARITY_BIAS
graphFileName = sagh.suffixWithArgs('user-file-graph', 1)
tableFileName = sagh.suffixWithArgs('user-user-simrank', 1)
biasedTableFileName = sagh.suffixWithArgs('user-user-simrank.biased', 2)

print >>sys.stderr, "loading %s" % graphFileName
graph = pickle.load(open(graphFileName))
print >>sys.stderr, "loading %s" % tableFileName
score = pickle.load(open(tableFileName))

lDevelopers = []
for node in graph.nodes(data=True):
    if (node[1]['type']=='Developer'): lDevelopers.append(node[0])
numDevs = len(lDevelopers)

biasedScore = {}
for i, u in enumerate(lDevelopers):
    if i % (numDevs / 10) == 0:
        print >>sys.stderr, "%d developers done so far" % i
    for v in lDevelopers[i+1:]:
        biasedScore[(u,v)] = score[(u,v)] * pow(len(graph.neighbors(v)), popularityBias)
        biasedScore[(v,u)] = score[(u,v)] * pow(len(graph.neighbors(u)), popularityBias)

for i, u in enumerate(lDevelopers):
    # to normalize, we need 2-passes
    biasedScore_u = [None] * numDevs
    # first, collect the values and compute max
    for j, v in enumerate(lDevelopers):
        if u == v: continue
        biasedScore_u[j] = biasedScore[(u,v)]
    max_u = max(biasedScore_u)
    if max_u > 0:
        for j, v in enumerate(lDevelopers):
            if u == v: continue
            s = biasedScore_u[j]
            if s > 0:
                print graph.node_labels_inv[u], graph.node_labels_inv[v], s / max_u #, s


print >>sys.stderr, "storing %s" % biasedTableFileName
pickle.dump(biasedScore, open(biasedTableFileName, 'w'))
