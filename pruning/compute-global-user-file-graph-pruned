#!/usr/bin/env python
import networkx as nx
import sagh,sys
import re
import pickle

graphFileName       = sagh.suffixWithArgs("user-file-graph-pruned", 1)
prunedGraphFileName = sagh.suffixWithArgs("user-file-graph-pruned", 2)

# load the unified global graph
g = pickle.load(open(graphFileName))

# Developer Pruning
numDevs = 0
numFiles = 0
numPruned = 0
print >>sys.stderr, "start pruning..."
for devs in g.nodes(data=True):
    
    if(devs[1]['type']!='Developer'): 
        numFiles += 1
        continue
    else:
        numDevs += 1
    files = g.neighbors(devs[0])
    
    sum_file=0
    sum_commit=0
    for f in files:
        sum_file += 1
        sum_commit += g.get_edge_data(devs[0],f)['w']
    if (sum_file==0 or sum_commit==sum_file):
        numPruned += 1
        g.remove_node(devs[0])
    # Remove the edges of the developers one by one depending on commits
    # Edges removed will be ones corresponding to files that have very small fraction of commits w.r.t this developer
print >>sys.stderr, "after pruning", "numRemainingDevs=%d numDevs=%d numFiles=%d" % (numDevs - numPruned, numDevs, numFiles)

pickle.dump(g, open(prunedGraphFileName, "w"))
