#!/usr/bin/env python
import networkx as nx
from collections import defaultdict
import pickle
import sys,os
import sagh

if len(sys.argv) < 2:
    print >>sys.stderr, "Usage: compute-global-simrank-biased-multiple GRAPH POPULARITY..."
    sys.exit(1)

graphFileName = sagh.suffixWithArgs('user-file-graph', 1)
tableFileName = sagh.suffixWithArgs('user-user-simrank', 1)
biasedTableFileNamePrefix = sagh.suffixWithArgs('user-user-simrank-biased', 1)

#score1 = {}
#score = pickle.load(open('user-user-simrank-pruned'))
print >>sys.stderr, "loading %s" % tableFileName
score = pickle.load(open(tableFileName))
print >>sys.stderr, "loading %s" % graphFileName
graph = pickle.load(open(graphFileName))

lDevelopers = []
for node in graph.nodes(data=True):
    if (node[1]['type']=='Developer'): 
        lDevelopers.append(node[0])
numDevs = len(lDevelopers)

# get popularity values to bias from command-line
biasedScores = {}
for pstr in sys.argv[2:]:
    p = float(pstr)
    biasedScores[p] = {}

print >>sys.stderr, "loading %s" % graphFileName
# bias the original scores
for (u,v),s in score.iteritems():
    for p,biasedScore in biasedScores.iteritems():
        biasedScore[(u,v)] = s * pow(len(graph.neighbors(v)), p)
        biasedScore[(v,u)] = s * pow(len(graph.neighbors(u)), p)

# normalize and dump
def normalize(biasedScore):
    for i, u in enumerate(lDevelopers):
    # to normalize, we need 2-passes
        biasedScore_u = [None] * numDevs
        # first, collect the values and compute max
        for j, v in enumerate(lDevelopers):
            #if u == v: continue
            if (u,v) not in biasedScore: continue
            biasedScore_u[j] = biasedScore[(u,v)]
        max_u = max(biasedScore_u)
        if max_u > 0:
            for j, v in enumerate(lDevelopers):
                if (u,v) not in biasedScore: continue
                #if u == v: continue
                s = biasedScore_u[j]
                if s > 0:
                    biasedScore[(u,v)]= s/max_u
                    #print graph.node_labels_inv[u], graph.node_labels_inv[v], s / max_u
                    #print u,v, s / max_u
    return biasedScore
for p,biasedScore in biasedScores.iteritems():
    biasedTableFileName = "%s-%f" % (biasedTableFileNamePrefix, p)
    print 'writing %s...' % biasedTableFileName
    pickle.dump(normalize(biasedScore), open(biasedTableFileName, 'w'))
print >>sys.stderr, 'done'
