#!/usr/bin/env python
# Usage: compute-global-cosine-optimized
import pickle
from math import sqrt
import sys

globalUserLangCosineSimFileName = 'user-user-langCosSim'
userToLangsFileName = 'user-langs'

## XXX copy/pasted from compute-global-score-pairs, don't touch
userToLangs = None
emptyLang = {}
def loadUserLangMap():
    global userToLangs
    if userToLangs != None: return
    print >>sys.stderr, "loading %s" % userToLangsFileName
    userToLangs = pickle.load(open(userToLangsFileName))
magnitude = lambda vs: sqrt(sum(v*v for v in vs)) if len(vs) > 0 else 0.0
def cosine_distance(u1, u2s):
    loadUserLangMap()
    try:
        v1 = userToLangs[u1]
    except:
        v1 = emptyLang
        print >>sys.stderr, "no language found: %s" % u1
    u1keys = set(v1.keys())
    u1m = magnitude(v1.values())
    dist = {}
    for u2 in u2s:
        try:
            v2 = userToLangs[graph.node_labels_inv[u2]]
        except:
            v2 = emptyLang
            print >>sys.stderr, "no language found: %s" % u2
        u1u2keys = u1keys | set(v2.keys())
        if len(u1u2keys) > 0:
            numerator = sum((v1[i] if i in v1 else 0) * (v2[i] if i in v2 else 0)
                    for i in u1u2keys)
            dist[u2] = 1.0 - (0.0 if numerator == 0 else numerator / (u1m * magnitude(v2.values())))
        else:
            dist[u2] = 1.0
    return dist

# compute cosine similarity for all pairs
loadUserLangMap()
users = userToLangs.keys()

print >>sys.stderr, "computing cosine similarities of %(len)d x %(len)d pairs" % {"len":len(users)}
userLangCosineSims = {}
for i,u1 in enumerate(users):
    u2dists = cosine_distance(u1, users[i+1:])
    for u2,dist in u2dists.iteritems():
        userLangCosineSims[(u1,u2)] = 1.0 - dist
        userLangCosineSims[(u2,u1)] = 1.0 - dist

print >>sys.stderr, "storing %s" % globalUserLangCosineSimFileName
pickle.dump(userLangCosineSims, open(globalUserLangCosineSimFileName, "w"))
